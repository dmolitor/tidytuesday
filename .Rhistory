pull(region),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
position = "fill",
stat = "identity") +
facet_wrap(~ region,
ncol = 2) +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
```{r out.extra=TRUE}
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
ggplot(animal_outcomes_long %>%
mutate(outcome = factor(outcome,
levels = animal_outcomes_long %>%
distinct(outcome, .keep_all = TRUE) %>%
arrange(desc(outcome_n)) %>%
pull(outcome),
ordered = TRUE))) +
geom_bar(aes(x = factor(year),
y = count,
fill = outcome),
stat = "identity") +
scale_fill_viridis(option = "plasma",
discrete = TRUE,
direction = 1) +
labs(x = "", y = "", title = "Australian Animal Outcomes") +
theme_minimal_hgrid() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90),
plot.title = element_text(face = "bold",
hjust = 0.5))
library(umbrella)
iris
iris %>%
as_tibble() %>%
mutate(across(where(is.factor), as.character))
mutate(across(is.factor, as.character))
mutate(across(where(is.factor), as.character))
iris %>%
iris %>%
fuck
iris %>%
as_tibble() %>%
mutate(across(where(is.factor), as.character))
iris %>%
as_tibble() %>%
mutate(across(is.factor, as.character))
iris %>% select(when(is.factor))
iris %>% select(which(is.factor))
iris %>% select(where(is.factor))
iris %>% select(starts_with("Sepal"))
iris %>% select(across(starts_with("Sepal")))
iris
iris2
iris3
iris
iris
iris <- iris
iris <- iris %>% as_tibble()
iris
test_df <- storms %>%
mutate(year = factor(year),
month = factor(month),
status = factor(status)) %>%
select(wind,
pressure,
year,
month,
status)
test_df
test_df <- storms %>%
mutate(year = factor(year),
month = factor(month),
status = factor(status)) %>%
select(wind,
pressure,
year,
month,
status)
bolasso_preds <- bolasso(train_x = test_df %>% select(-wind),
train_y = test_df$wind,
formula = ~ .^2,
family  = "gaussian",
nfold   = 5,
nboot   = 100,
verbose = TRUE)
View(bolasso_preds$selected_variables)
bolasso_preds2 <- bolasso(train_x = test_df %>% select(-wind),
train_y = test_df$wind,
formula = ~ .^2,
family  = "gaussian",
nfold   = 5,
nboot   = 100,
verbose = TRUE)
View(bolasso_preds2)
View(bolasso_preds2$selected_variables)
identical(bolasso_preds$selected_variables, bolasso_preds2$selected_variables)
bolasso_preds <- bolasso(train_x = test_df %>% select(-wind),
train_y = test_df$wind,
formula = ~ .^2,
family  = "frick",
nfold   = 5,
nboot   = 100,
verbose = TRUE)
bootstrap(iris %>% group_by(Species), m = 100, by_group = T)
bootstrap(iris %>% group_by(Species), m = 100, by_group = T)
install.packages("rsample")
library(rsample)
rsample::bootstraps(data = iris, times = 25, strata = "Species")
test <- rsample::bootstraps(data = iris, times = 25, strata = "Species")
test$splits
test$splits[1]
test$splits[[1]]
test <- rsample::bootstraps(data = iris, times = 25, strata = "Species")
test@
1
as.data.frame(test$splits)
test_df
library(caret)
samples <- createResample(test_df$wind, 100)
samples
bootstrap_list1 <- lapply(samples, function(x) {
return(test_df[x, ])
})
bootstrap_list1$Resample001
bootstrap_list1$Resample100
nrow(test_df)
identical(bootstrap_list1$Resample001, bootstrap_list1$Resample100)
source("C:/Users/DanielMolitor/code/ridlt-fow-analysis/analysis/FOW/cloud/DML/dml_functions.R")
install.packages("sandwich")
source("C:/Users/DanielMolitor/code/ridlt-fow-analysis/analysis/FOW/cloud/DML/dml_functions.R")
source("C:/Users/DanielMolitor/code/ridlt-fow-analysis/analysis/helper_functions.R")
source("C:/Users/DanielMolitor/code/ridlt-fow-analysis/analysis/FOW/cloud/DML/dml_functions.R")
source("C:/Users/DanielMolitor/code/ridlt-fow-analysis/analysis/helper_functions.R")
test_df <- storms %>%
mutate(year = factor(year),
month = factor(month),
status = factor(status)) %>%
select(wind,
pressure,
year,
month,
status)
bolasso_preds <- bolasso(train_x = test_df %>% select(-wind),
train_y = test_df$wind,
formula = ~ .^2,
family  = "gaussian",
nfold   = 5,
nboot   = 100,
verbose = TRUE)
samples <- createResample(test_df$wind, 100)
bootstrap_list1 <- lapply(samples, function(x) {
return(test_df[x, ])
})
test_ridge_boot <- hte_ridge_boot(formula = wind ~ .^2,
df = test_df,
nfolds = 5,
lambda = "lambda.min",
nboot = 25,
standardize = F,
verbose = TRUE)
View(test_ridge_boot)
View(test_ridge_boot)
test_ridge_boot <- hte_ridge_boot(formula = wind ~ .,
df = test_df,
nfolds = 5,
lambda = "lambda.min",
nboot = 25,
standardize = F,
verbose = TRUE)
View(test_ridge_boot)
samples <- createResample(test_df$wind, 25)
bootstrap_list1 <- lapply(samples, function(x) {
return(test_df[x, ])
})
bootstrap_list <- lapply(samples, function(x) {
return(test_df[x, ])
})
rm(bootstrap_list1)
bootstrap_list$Resample24
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 25,
standardize = F,
verbose = F))
})
bo_ridge$Resample01
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 25,
standardize = F,
verbose = F) %>%
select(VARIABLE, SIGNIFICANT))
}) %>%
reduce(left_join, by = "VARIABLE")
View(bo_ridge)
source("C:/Users/DanielMolitor/code/ridlt-fow-analysis/analysis/FOW/cloud/DML/dml_functions.R")
source("C:/Users/DanielMolitor/code/ridlt-fow-analysis/analysis/helper_functions.R")
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 25,
standardize = F,
verbose = F) %>%
select(VARIABLE, SIGNIFICANT))
}) %>%
reduce(left_join, by = "VARIABLE")
bo_ridge
bo_ridge %>% rowwise() %>% mutate(across(starts_with("SIGNIFICANT"), ~ function(x){sum(x)/(ncol(bo_ridge) - 1)}))
bo_ridge %>% rowwise() %>% mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1))
bo_ridge %>% rowwise() %>% mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>% select(VARIABLE, PERCENT_SELECTED)
bo_ridge %>% rowwise() %>% mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>% select(VARIABLE, PERCENT_SELECTED) %>% filter(PERCENT_SELECTED == 1)
bo_ridge_selected <- bo_ridge %>%
rowwise() %>%
mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>%
select(VARIABLE,
PERCENT_SELECTED) %>%
filter(PERCENT_SELECTED == 1)
bo_ridge_selected <- bo_ridge %>%
rowwise() %>%
mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>%
select(VARIABLE,
PERCENT_SELECTED) %>%
filter(PERCENT_SELECTED == 1) %>%
select(VARIABLE)
bo_ridge_selected
start.time <- Sys.time()
bolasso_preds <- bolasso(train_x = test_df %>% select(-wind),
train_y = test_df$wind,
formula = ~ .,
family  = "gaussian",
nfold   = 5,
nboot   = 100,
verbose = TRUE)
Sys.time() - start.time
start.time <- Sys.time()
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 25,
standardize = F,
verbose = F) %>%
select(VARIABLE, SIGNIFICANT))
}) %>%
reduce(left_join, by = "VARIABLE") %>%
rowwise() %>%
mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>%
select(VARIABLE,
PERCENT_SELECTED) %>%
filter(PERCENT_SELECTED == 1) %>%
select(VARIABLE)
Sys.time() - start.time
View(bolasso_preds$selected_variables)
View(bo_ridge)
samples <- createResample(test_df$wind, 100)
bootstrap_list <- lapply(samples, function(x) {
return(test_df[x, ])
})
start.time <- Sys.time()
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 100,
standardize = F,
verbose = F) %>%
select(VARIABLE, SIGNIFICANT))
}) %>%
reduce(left_join, by = "VARIABLE") %>%
rowwise() %>%
mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>%
select(VARIABLE,
PERCENT_SELECTED) %>%
filter(PERCENT_SELECTED == 1) %>%
select(VARIABLE)
Sys.time() - start.time
View(bo_ridge)
bo_ridge
bo_ridge_selected
samples <- createResample(test_df$wind, 10)
bootstrap_list <- lapply(samples, function(x) {
return(test_df[x, ])
})
start.time <- Sys.time()
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 10,
standardize = F,
verbose = F) %>%
select(VARIABLE, SIGNIFICANT))
}) %>%
reduce(left_join, by = "VARIABLE") %>%
rowwise() %>%
mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>%
select(VARIABLE,
PERCENT_SELECTED) %>%
filter(PERCENT_SELECTED == 1) %>%
select(VARIABLE)
Sys.time() - start.time
start.time <- Sys.time()
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 10,
standardize = F,
verbose = F) %>%
select(VARIABLE, SIGNIFICANT))
}) %>%
reduce(left_join, by = "VARIABLE")
bo_ridge <- bo_ridge %>%
rowwise() %>%
mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>%
select(VARIABLE,
PERCENT_SELECTED) %>%
filter(PERCENT_SELECTED == 1) %>%
select(VARIABLE)
Sys.time() - start.time
bo_ridge
gc()
rm(bo_ridge_selected)
rm(bo_ridge)
samples <- createResample(test_df$wind, 10)
bootstrap_list <- lapply(samples, function(x) {
return(test_df[x, ])
})
start.time <- Sys.time()
bo_ridge <- future_lapply(samples, function(x) {
return(hte_ridge_boot(formula = wind ~ .,
df = test_df[x, ],
nfolds = 5,
lambda = "lambda.min",
nboot = 10,
standardize = F,
verbose = F) %>%
select(VARIABLE, SIGNIFICANT))
}) %>%
reduce(left_join, by = "VARIABLE")
bo_ridge <- bo_ridge %>%
rowwise() %>%
mutate(PERCENT_SELECTED = sum(c_across(starts_with("SIGNIFICANT")))/(ncol(bo_ridge) - 1)) %>%
select(VARIABLE,
PERCENT_SELECTED) %>%
filter(PERCENT_SELECTED == 1) %>%
select(VARIABLE)
Sys.time() - start.time
